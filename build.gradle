plugins {
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
    id 'org.spongepowered.mixin' version '0.7.+'
}



version = mod_version
group = mod_group_id

base {
    archivesName = mod_id
}

// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    mappings channel: mapping_channel, version: mapping_version

    copyIdeResources = true

    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'
        	arg '--mixin.config'
			arg 'mixins.cuffed.json'

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'
            arg '--mixin.config'
			arg 'mixins.cuffed.json'

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven {
        url 'https://www.cursemaven.com'
        content {
            includeGroup "curse.maven"
        }
    }
}

dependencies {

    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    // Require Lazr's Lib
    implementation fg.deobf("curse.maven:lazrs-lib-${lazrslib_maven}")

    // Optional Dependencies
    compileOnly fg.deobf("curse.maven:better-combat-by-daedelus-639842:4534619") // Better Combat
    compileOnly fg.deobf("curse.maven:epic-fight-mod-405076:5593321") // Epic Fight
    compileOnly fg.deobf("curse.maven:parcool-482378:5323143") // Parcool
    compileOnly fg.deobf("curse.maven:elenai-dodge-2-442962:4127740") // elenai dodge 2
    
    compileOnly fg.deobf("curse.maven:irons-spells-n-spellbooks-855414:5616391") // Iron spell n' spellbooks
    compileOnly fg.deobf("curse.maven:ars-nouveau-401955:5171729") // Ars Nouveau

    compileOnly fg.deobf("curse.maven:playerrevive-266890:5491953") // Player Revive

    compileOnly fg.deobf("curse.maven:simple-voice-chat-416089:5605418") // Simple Voice Chat

    // Apply Mixin AP
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
}


mixin {
    add sourceSets.main, 'mixin.cuffed.refmap.json'
    config 'mixins.cuffed.json'
}

def resourceTargets = ['META-INF/mods.toml', 'pack.mcmeta']
def replaceProperties = [
        minecraft_version: minecraft_version, minecraft_version_range: minecraft_version_range,
        forge_version: forge_version, forge_version_range: forge_version_range,
        loader_version_range: loader_version_range,
        mod_id: mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
        mod_authors: mod_authors, mod_description: mod_description, lazrslib_maven:lazrslib_maven,
        lazrslib_version_range: lazrslib_version_range
]

processResources {
    inputs.properties replaceProperties
    replaceProperties.put 'project', project

    filesMatching(resourceTargets) {
        expand replaceProperties
    }
}

jar {
    archiveFileName.set(project.mod_name +"-" + project.minecraft_version + "-" + project.mod_version + ".jar")
    manifest {
        attributes([
                "Specification-Title"     : mod_id,
                "Specification-Vendor"    : mod_authors,
                "Specification-Version"   : mod_version, // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : mod_authors,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs": "mixins.cuffed.json"
        ])
    }
}


jar.finalizedBy('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
